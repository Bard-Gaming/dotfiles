#!/bin/bash


#################################################
##                                             ##
##                  Constants                  ##
##                                             ##
#################################################

DOCKER_CMD="docker"
USAGE_MSG="Usage: epitest [OPTIONS ...] <command> [<args> ...]"
IMAGE="epitechcontent/epitest-docker"


#################################################
##                                             ##
##                 Dependencies                ##
##                                             ##
#################################################

if ! command -v docker &> /dev/null; then
    echo "Error: Docker is not installed. Please install it and try again." >&2
    exit 1
fi


#################################################
##                                             ##
##                Prerequisites                ##
##                                             ##
#################################################

DOCKER_SOCKET_PATH=/var/run/docker.sock
HAS_SOCKET_ACCESS=$(test -r $DOCKER_SOCKET_PATH; echo "$?")

if [ $HAS_SOCKET_ACCESS -ne 0 ]; then
    if ! grep -q "^docker:" /etc/group; then
        echo "Creating the 'docker' group..."
        sudo groupadd docker
    fi

    echo "WARNING: Socket access is denied"
    echo "To fix this we will add the current user to docker group with : sudo usermod -a -G docker $USER"
    read -p "Do you want to proceed? (yes/no) " yn

    case $yn in
        yes | Y | y | Yes | YES)
            echo "ok, we will proceed";
            sudo usermod -a -G docker $USER;
            echo "You must reboot your computer for the changes to take effect"
            ;;
        no | N | n | No | NO)
            echo "ok, Skipping"
            ;;
        *)
            echo "invalid response, Skipping"
            ;;
    esac

    DOCKER_CMD="sudo ${DOCKER_CMD}"  # a reboot is required, so continue with sudo for now
fi


#################################################
##                                             ##
##                  Functions                  ##
##                                             ##
#################################################

display_help() {
    cat <<EOF
Usage: epitest [OPTIONS ...] <command> [<args> ...]

Options:
    -g, --graphical      Enable graphical mode (useful for CSFML projects)
    -h, --help           Display this help message and exit
    -i, --interactive    Switch to interactive mode
    -u, --update         Update the docker image before running the command

Notes:
    Specifying either the -h, -i, or -u options (or their long equivalents)
    makes specifying a command optional.

Examples:
    epitest ./a.out         # execute the a.out file
    epitest -u ./a.out      # update the docker image and execute a.out
    epitest -g ./my_hunter  # run a graphical application
EOF
}

update() {
    # put info on stderr so not as to interfere with user output
    echo "epitest: Checking for updates..." >&2

    if docker image inspect "$IMAGE" &>/dev/null; then
        $DOCKER_CMD pull "$IMAGE" | tee pull.log >&2

        if grep -q "Downloaded newer image" pull.log; then
            echo "epitest: New image detected. Removing old version..." >&2
            docker image rm "$(docker images -q "$IMAGE")"
        else
            echo "epitest: Image already up to date." >&2
        fi

        rm pull.log
    else
        echo "epitest: Image not found locally. Pulling it for the first time... " >&2
        $DOCKER_CMD pull "$IMAGE" >&2
    fi
}

is_relative_path() {
    printf "%s" "$1" | grep -F "/"
}


#################################################
##                                             ##
##                   Parsing                   ##
##                                             ##
#################################################

CMD=""
DO_UPDATE=false
REQUIRES_CMD=true
INTERACTIVE=false
GRAPHICAL=false


if [[ -z "${@:1}" ]]; then
    echo "$USAGE_MSG" >&2
    exit 1
fi

while [[ $# -gt 0 ]]; do
    case "$1" in
        -g | --graphical)
            GRAPHICAL=true
            shift
            ;;
        -h | --help)
            display_help
            exit 0
            ;;
        -i | --interactive)
            REQUIRES_CMD=false
            INTERACTIVE=true
            shift
            ;;
        -u | --update)
            REQUIRES_CMD=false
            DO_UPDATE=true
            shift
            ;;
        -*)
            echo "epitest: unknown argument \"$1\"" >&2
            exit 1
            ;;
        *)
            CMD="${@:1}"
            break
            ;;
    esac
done

if [[ "$REQUIRES_CMD" = true && -z "$CMD" ]]; then
    echo "epitest: epitest requires at least one command" >&2
    exit 1
fi


# ensure update is only done once, even if -u is specified multiple times
if [[ "$DO_UPDATE" = true ]]; then
    update
fi

if [[ "$INTERACTIVE" = true ]]; then
    $DOCKER_CMD run --rm -it -v "$PWD":/app -w /app "$IMAGE" bash
fi

if [[ "$REQUIRES_CMD" = false && -z "$CMD" ]]; then
    exit 0
fi


#################################################
##                                             ##
##                 Docker Setup                ##
##                                             ##
#################################################

DOCKER_RUN_OPTS=("--rm" "-it" "-v" "$(pwd):/app" "-w" "/app")

if [[ "$GRAPHICAL" = true ]]; then
    printf "Setting up graphical env... " >&2
    xhost +local:docker &>/dev/null
    echo "Done!" >&2
    DOCKER_RUN_OPTS+=("-e" "DISPLAY=$DISPLAY" "-v" "/tmp/.X11-unix:/tmp/.X11-unix:rw" "--net=host")
fi

#################################################
##                                             ##
##                     Run                     ##
##                                             ##
#################################################

# Rebuild project in graphical mode to ensure support
if [[ "$GRAPHICAL" = true ]] && is_relative_path $CMD && [[ -f "Makefile" ]]; then
    printf "Rebuilding project in new env... " >&2

    if ! $DOCKER_CMD run "${DOCKER_RUN_OPTS[@]}" "$IMAGE" bash -c "make re" &>/dev/null; then
        echo "Failed (Is the 're' rule missing?)." >&2
    else
        echo "Done!" >&2
    fi
fi

# Run the given command(s)
$DOCKER_CMD run "${DOCKER_RUN_OPTS[@]}" "$IMAGE" bash -c "$CMD"
