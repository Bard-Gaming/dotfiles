#!/bin/bash


#################################################
##                                             ##
##                  Constants                  ##
##                                             ##
#################################################

DOCKER_CMD="docker"
USAGE_MSG="Usage: epitest [OPTIONS ...] <command> [<args> ...]"
IMAGE="epitechcontent/epitest-docker"


#################################################
##                                             ##
##                 Dependencies                ##
##                                             ##
#################################################

if ! command -v docker &> /dev/null; then
    echo "Error: Docker is not installed. Please install it and try again." >&2
    exit 1
fi


#################################################
##                                             ##
##                Prerequisites                ##
##                                             ##
#################################################

DOCKER_SOCKET_PATH=/var/run/docker.sock
HAS_SOCKET_ACCESS=$(test -r $DOCKER_SOCKET_PATH; echo "$?")

if [ $HAS_SOCKET_ACCESS -ne 0 ]; then
    if ! grep -q "^docker:" /etc/group; then
        echo "Creating the 'docker' group..."
        sudo groupadd docker
    fi

    echo "WARNING: Socket access is denied"
    echo "To fix this we will add the current user to docker group with : sudo usermod -a -G docker $USER"
    read -p "Do you want to proceed? (yes/no) " yn

    case $yn in
        yes | Y | y | Yes | YES)
            echo "ok, we will proceed";
            sudo usermod -a -G docker $USER;
            echo "You must reboot your computer for the changes to take effect"
            ;;
        no | N | n | No | NO)
            echo "ok, Skipping"
            ;;
        *)
            echo "invalid response, Skipping"
            ;;
    esac

    DOCKER_CMD="sudo ${DOCKER_CMD}"  # a reboot is required, so continue with sudo for now
fi


#################################################
##                                             ##
##                  Functions                  ##
##                                             ##
#################################################

update() {
    # put info on stderr so not as to interfere with user output
    echo "epitest: Checking for updates..." >&2

    if docker image inspect "$IMAGE" &>/dev/null; then
        $DOCKER_CMD pull "$IMAGE" | tee pull.log >&2

        if grep -q "Downloaded newer image" pull.log; then
            echo "epitest: New image detected. Removing old version..." >&2
            docker image rm "$(docker images -q "$IMAGE")"
        else
            echo "epitest: Image already up to date." >&2
        fi

        rm pull.log
    else
        echo "epitest: Image not found locally. Pulling it for the first time..." >&2
        $DOCKER_CMD pull "$IMAGE"
    fi
}


#################################################
##                                             ##
##                   Parsing                   ##
##                                             ##
#################################################

CMD=""
DO_UPDATE=false
REQUIRES_CMD=true
INTERACTIVE=false


if [[ -z "${@:1}" ]]; then
    echo "$USAGE_MSG" >&2
    exit 1
fi

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h | --help)
            echo "$USAGE_MSG"
            exit 0
            ;;
        -u | --update)
            REQUIRES_CMD=false
            DO_UPDATE=true
            shift
            ;;
        -i | --interactive)
            REQUIRES_CMD=false
            INTERACTIVE=true
            shift
            ;;
        -*)
            echo "epitest: unknown argument \"$1\"" >&2
            exit 1
            ;;
        *)
            CMD="${@:1}"
            break
            ;;
    esac
done

if [[ "$REQUIRES_CMD" = true && -z "$CMD" ]]; then
    echo "epitest: epitest requires at least one command" >&2
    exit 1
fi


# ensure update is only done once, even if -u is specified multiple times
if [[ "$DO_UPDATE" = true ]]; then
    update
fi

if [[ "$INTERACTIVE" = true ]]; then
    $DOCKER_CMD run --rm -it -v "$PWD":/app -w /app "$IMAGE" bash
fi

if [[ "$REQUIRES_CMD" = false && -z "$CMD" ]]; then
    exit 0
fi


#################################################
##                                             ##
##                     Run                     ##
##                                             ##
#################################################

$DOCKER_CMD run --rm -it -v "$PWD":/app -w /app "$IMAGE" bash -c "$CMD"
