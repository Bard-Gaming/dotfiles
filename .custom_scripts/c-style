#!/bin/bash


SCRIPT_NAME=$(basename "$0")
PROJECT_DIR="."
IGNORE_FILE=""
REPORT_FILE="coding-style-reports.log"


#########################################################
##                                                     ##
##                        Colors                       ##
##                                                     ##
#########################################################

COLOR_FATAL=$'\033[1;38;5;207m'
COLOR_MAJOR=$'\033[1;31m'
COLOR_MINOR=$'\033[1;93m'
COLOR_INFO=$'\033[1;37m'
COLOR_TOTAL=$'\033[1;97m'
COLOR_NO_ERR=$'\033[1;32m'
COLOR_RESET=$'\033[0m'


#########################################################
##                                                     ##
##                        Utils                        ##
##                                                     ##
#########################################################

display_help() {
   cat << EOF

Usage:
    $SCRIPT_NAME [OPTION]... [DIRECTORY]

List all coding style violations for a given project.

Options:
    -h, --help
        display this help message and exit

    -i, --ignore[=FILE]
        ignore the files/directories specified in FILE (default: .gitignore)

EOF
}

print_color() {
    printf "%s%s%s\n" "$1" "$2" "$COLOR_RESET"
}

load_coding_style_checker() {
    echo "Loading coding style..."

    docker run --rm --security-opt "label:disable" -i -v "$1":"/mnt/delivery" -v "$1":"/mnt/reports" ghcr.io/epitech/coding-style-checker:latest "/mnt/delivery" "/mnt/reports" &>/dev/null

    if [ ! -f "$PROJECT_DIR/$REPORT_FILE" ]; then
        print_color "$COLOR_MAJOR" "Failed to load coding-style!"
        exit 1
    fi
    
    echo ""
}

is_ignored_file() {
    local FILE IGNORED_FILE

    FILE="$(echo "$1" | xargs)"
    while IFS= read -r LINE || [ "$LINE" ]; do
        IGNORED_FILE="$(echo "$LINE" | xargs)"

        if [ "$(realpath "$FILE")" = "$(realpath "$IGNORED_FILE")" ]; then
            return 0;
        fi
    done < "$IGNORE_FILE"

    return 1;
}

ignore_files() {
    local TMP_DIR

    TMP_DIR="/tmp/cstyle"

    rm -rf "$TMP_DIR"
    mkdir "$TMP_DIR"

    for FILE in "$PROJECT_DIR"/* "$PROJECT_DIR"/.*; do
        if [ "$FILE" = "$REPORT_FILE" ] || is_ignored_file "$FILE"; then
            continue
        fi

        cp -r "$FILE" "$TMP_DIR"
    done

    PROJECT_DIR="$TMP_DIR"
}

count_chars() {
    local STRING_NO_ANSI NO_ANSI_SUBSTITUTE

    NO_ANSI_SUBSTITUTE='s/\x1B\[([0-9]{1,3}(;[0-9]{1,3})*)?[m|K]//g'
    STRING_NO_ANSI="$(echo "$1" | sed -r "$NO_ANSI_SUBSTITUTE")"
    echo "${#STRING_NO_ANSI}"
}

display_report_header() {
    local FILE FATAL_COUNT MAJOR_COUNT MINOR_COUNT INFO_COUNT TOTAL_COUNT

    FILE="$1"

    FATAL_COUNT="$(grep -c "FATAL" < "$FILE")"
    MAJOR_COUNT="$(grep -c "MAJOR" < "$FILE")"
    MINOR_COUNT="$(grep -c "MINOR" < "$FILE")"
    INFO_COUNT="$(grep -c "INFO" < "$FILE")"
    TOTAL_COUNT=$((FATAL_COUNT + MAJOR_COUNT + MINOR_COUNT + INFO_COUNT))

    if [ "$TOTAL_COUNT" -eq 0 ]; then
        print_color "$COLOR_NO_ERR" "Your project is coding-style compliant!"
        return
    fi

    if [ "$FATAL_COUNT" -eq 0 ]; then
        COUNT_MSG="$(print_color "$COLOR_TOTAL" "$TOTAL_COUNT coding style error(s)") - $(print_color "$COLOR_MAJOR" "$MAJOR_COUNT major"), $(print_color "$COLOR_MINOR" "$MINOR_COUNT minor"), $(print_color "$COLOR_INFO" "$INFO_COUNT info")"
    else
        COUNT_MSG="$(print_color "$COLOR_TOTAL" "$TOTAL_COUNT coding style error(s)") - $(print_color "$COLOR_FATAL" "$FATAL_COUNT fatal"), $(print_color "$COLOR_MAJOR" "$MAJOR_COUNT major"), $(print_color "$COLOR_MINOR" "$MINOR_COUNT minor"), $(print_color "$COLOR_INFO" "$INFO_COUNT info")"
    fi

    local MSG_LEN

    MSG_LEN="$(count_chars "$COUNT_MSG")"
    echo "$COUNT_MSG"
    printf -- '-%.0s' $(seq 1 "$MSG_LEN")
    echo ""
}

display_report() {
    display_report_header "$1"

    sed "s/FATAL/$(print_color "$COLOR_FATAL" "FATAL")/" < "$1" | \
    sed "s/MAJOR/$(print_color "$COLOR_MAJOR" "MAJOR")/" | \
    sed "s/MINOR/$(print_color "$COLOR_MINOR" "MINOR")/" | \
    sed "s/INFO/$(print_color "$COLOR_INFO" "INFO")/"
}

#########################################################
##                                                     ##
##                       Parsing                       ##
##                                                     ##
#########################################################

POSITIONAL_ARGS=0

while [ "$#" -gt 0 ]; do
    case "$1" in
        -h | --help)
            display_help
            exit 0
            ;;
        -i | --ignore)
            shift

            if [ "$#" -gt 0 ] && [ "${1:1}" != "-" ]; then
                IGNORE_FILE="$1"
                shift
            else
                IGNORE_FILE=".gitignore"
            fi

            if ! [ -f "$IGNORE_FILE" ]; then
                echo "$SCRIPT_NAME: error: couldn't find file \"$IGNORE_FILE\"" >&2
                exit 1
            fi
            ;;
        -*)
            echo "$SCRIPT_NAME: error: invalid option \"$1\"" >&2
            exit 2
            ;;
        *)
            POSITIONAL_ARGS=$((POSITIONAL_ARGS + 1))

            if [ "$POSITIONAL_ARGS" -gt 1 ]; then
                echo "$SCRIPT_NAME: error: too many args" >&2
                exit 2
            fi

            PROJECT_DIR="$1"
            shift
            ;;
    esac
done

if ! [ -d "$PROJECT_DIR" ]; then
    echo "$SCRIPT_NAME: error: \"$PROJECT_DIR\" is not a valid directory" >&2
    exit 1
fi


#########################################################
##                                                     ##
##                   Program Runtime                   ##
##                                                     ##
#########################################################

if [ "$IGNORE_FILE" ]; then
    ignore_files "$IGNORE_FILE"
fi

load_coding_style_checker "$PROJECT_DIR"

display_report "$PROJECT_DIR/$REPORT_FILE"

rm -f "$PROJECT_DIR/$REPORT_FILE"
