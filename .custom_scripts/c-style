#!/bin/bash


SCRIPT_NAME=$(basename "$0")
PROJECT_DIR="."
IGNORE_FILE=""
CLEAN_RULE=""
REPORT_FILE="coding-style-reports.log"
UPDATE_CODING_STYLE="no"  # set to "yes" to always try to update


#########################################################
##                                                     ##
##                        Colors                       ##
##                                                     ##
#########################################################

COLOR_FATAL=$'\033[1;38;5;207m'
COLOR_MAJOR=$'\033[1;31m'
COLOR_MINOR=$'\033[1;93m'
COLOR_INFO=$'\033[1;37m'
COLOR_TOTAL=$'\033[1;97m'
COLOR_NO_ERR=$'\033[1;32m'
COLOR_RESET=$'\033[0m'


#########################################################
##                                                     ##
##                        Utils                        ##
##                                                     ##
#########################################################

display_help() {
   cat << EOF

Usage:
    $SCRIPT_NAME [OPTION]... [DIRECTORY]

List all coding style violations for a given project.

Options:
    -c, --clean[=RULE]
        clean up the project before running the checker,
        using the specified rule with GNU Make (default: fclean)

    -h, --help
        display this help message and exit

    -i, --ignore[=FILE]
        ignore the files/directories specified in FILE (default: .gitignore)

    -u, --update
        updates the coding style checker

EOF
}

print_color() {
    printf "%s%s%s\n" "$1" "$2" "$COLOR_RESET"
}

update_coding_style_checker() {
    local GHCR_REGISTRY_TOKEN GHCR_REPOSITORY_STATUS

    GHCR_REGISTRY_TOKEN=$(curl -s "https://ghcr.io/token?service=ghcr.io&scope=repository:epitech/coding-style-checker:pull" | grep -o '"token":"[^"]*' | grep -o '[^"]*$')
    GHCR_REPOSITORY_STATUS=$(curl -I -f -s -o /dev/null -H "Authorization: Bearer $GHCR_REGISTRY_TOKEN" "https://ghcr.io/v2/epitech/coding-style-checker/manifests/latest" && echo 0 || echo 1)

    if [ "$GHCR_REPOSITORY_STATUS" -eq 0 ]; then
        echo "Downloading new image and cleaning old one..." >&2
        docker pull ghcr.io/epitech/coding-style-checker:latest || (echo "Download ERROR" >&2; return 1)
        docker image prune -f || (echo "Download ERROR" >&2; return 1)
        echo "Download OK" >&2
    else
        echo "WARNING: Skipping image download" >&2
    fi
}

load_coding_style_checker() {
    local CS_PATH
    CS_PATH="$(realpath "$1")"

    printf "Loading coding style in %s..." "$(basename "$CS_PATH")" >&2

    docker run --rm --security-opt "label:disable" -i -v "$CS_PATH":"/mnt/delivery" -v "$CS_PATH":"/mnt/reports" ghcr.io/epitech/coding-style-checker:latest "/mnt/delivery" "/mnt/reports" &>/dev/null

    if [ ! -f "$PROJECT_DIR/$REPORT_FILE" ]; then
        echo " Error!" >&2
        echo  # add newline in stdout (not stderr)
        print_color "$COLOR_MAJOR" "Failed to load coding-style!"
        exit 1
    fi

    echo " Done!" >&2
    echo  # add newline in stdout (not stderr)
}

make_clean_rule() {
    printf "Running make %s..." "$CLEAN_RULE" >&2

    if ! make -C "$PROJECT_DIR" "$CLEAN_RULE" &>/dev/null; then
        echo " Error!" >&2
        exit 1
    fi

    echo " Done!" >&2
}

is_ignored_file() {
    local FILE IGNORED_FILES PARENT_DIR

    FILE="$(basename "$1" | xargs)"
    PARENT_DIR="$(dirname "$1")"

    if [ "$FILE" = "$REPORT_FILE" ] || [ "$FILE" = "." ] || [ "$FILE" = ".." ] || [ "$FILE" = ".git" ] || [ "$FILE" = ".cache" ]; then
        return 0
    fi

    while IFS= read -r LINE || [ "$LINE" ]; do
        IGNORED_FILES="$(cut -d'#' -f1 <<< "$LINE" | xargs)"  # remove comments

        for IGNORED_FILE in "$PARENT_DIR/"$IGNORED_FILES; do
            if [ -z "$IGNORED_FILE" ]; then
                continue
            fi

            if [ "$(realpath "$PARENT_DIR/$FILE")" = "$(realpath "$IGNORED_FILE")" ]; then
                return 0;
            fi
        done

    done < "$IGNORE_FILE"

    return 1;
}

copy_files_to_dir() {
    local OUTPUT_DIR SRC_DIR FILE_ABS

    OUTPUT_DIR="$1"
    SRC_DIR="$2"

    for FILE in "$SRC_DIR"/* "$SRC_DIR"/.*; do
        if [ "$(basename "$FILE")" = "*" ] || [ "$(basename "$FILE")" = ".*" ]; then
            continue
        fi

        FILE="$(basename "$FILE")"
        FILE_ABS="$(realpath "$SRC_DIR/$FILE")"

        if is_ignored_file "$FILE_ABS"; then
            continue
        fi

        if [ -d "$FILE_ABS" ]; then
            local NEW_OUTPUT_DIR

            NEW_OUTPUT_DIR="$(realpath "$OUTPUT_DIR/$FILE")"
            mkdir "$NEW_OUTPUT_DIR"

            copy_files_to_dir "$NEW_OUTPUT_DIR" "$SRC_DIR/$FILE"

            continue
        fi

        cp "$FILE_ABS" "$OUTPUT_DIR"
    done
}

ignore_files() {
    printf "Ignoring files in %s..." "$IGNORE_FILE" >&2

    local TMP_DIR
    TMP_DIR="/tmp/cstyle"

    rm -rf "$TMP_DIR"
    mkdir "$TMP_DIR"

    copy_files_to_dir "$TMP_DIR" "$PROJECT_DIR"

    PROJECT_DIR="$TMP_DIR"

    echo " Done!" >&2
}

count_chars() {
    local STRING_NO_ANSI NO_ANSI_SUBSTITUTE

    NO_ANSI_SUBSTITUTE='s/\x1B\[([0-9]{1,3}(;[0-9]{1,3})*)?[m|K]//g'
    STRING_NO_ANSI="$(echo "$1" | sed -r "$NO_ANSI_SUBSTITUTE")"
    echo "${#STRING_NO_ANSI}"
}

display_report_header() {
    local FILE FATAL_COUNT MAJOR_COUNT MINOR_COUNT INFO_COUNT TOTAL_COUNT

    FILE="$1"

    FATAL_COUNT="$(grep -c "FATAL" < "$FILE")"
    MAJOR_COUNT="$(grep -c "MAJOR" < "$FILE")"
    MINOR_COUNT="$(grep -c "MINOR" < "$FILE")"
    INFO_COUNT="$(grep -c "INFO" < "$FILE")"
    TOTAL_COUNT=$((FATAL_COUNT + MAJOR_COUNT + MINOR_COUNT + INFO_COUNT))

    if [ "$TOTAL_COUNT" -eq 0 ]; then
        print_color "$COLOR_NO_ERR" "Your project is coding-style compliant!"
        return
    fi

    if [ "$FATAL_COUNT" -eq 0 ]; then
        COUNT_MSG="$(print_color "$COLOR_TOTAL" "$TOTAL_COUNT coding style error(s)") - $(print_color "$COLOR_MAJOR" "$MAJOR_COUNT major"), $(print_color "$COLOR_MINOR" "$MINOR_COUNT minor"), $(print_color "$COLOR_INFO" "$INFO_COUNT info")"
    else
        COUNT_MSG="$(print_color "$COLOR_TOTAL" "$TOTAL_COUNT coding style error(s)") - $(print_color "$COLOR_FATAL" "$FATAL_COUNT fatal"), $(print_color "$COLOR_MAJOR" "$MAJOR_COUNT major"), $(print_color "$COLOR_MINOR" "$MINOR_COUNT minor"), $(print_color "$COLOR_INFO" "$INFO_COUNT info")"
    fi

    local MSG_LEN

    MSG_LEN="$(count_chars "$COUNT_MSG")"
    echo "$COUNT_MSG"
    printf -- '-%.0s' $(seq 1 "$MSG_LEN")
    echo ""
}

display_report() {
    display_report_header "$1"

    sed "s/FATAL/$(print_color "$COLOR_FATAL" "FATAL")/" < "$1" | \
    sed "s/MAJOR/$(print_color "$COLOR_MAJOR" "MAJOR")/" | \
    sed "s/MINOR/$(print_color "$COLOR_MINOR" "MINOR")/" | \
    sed "s/INFO/$(print_color "$COLOR_INFO" "INFO")/"
}


#########################################################
##                                                     ##
##                       Parsing                       ##
##                                                     ##
#########################################################

POSITIONAL_ARGS=0

while [ "$#" -gt 0 ]; do
    case "$1" in
        -c | --clean)
            shift

            if [ "$#" -gt 0 ] && [ "${1:1}" != "-" ]; then
                CLEAN_RULE="$1"
                shift
            else
                CLEAN_RULE="fclean"
            fi
            ;;
        -h | --help)
            display_help
            exit 0
            ;;
        -i | --ignore)
            shift

            if [ "$#" -gt 0 ] && [ "${1:1}" != "-" ]; then
                IGNORE_FILE="$1"
                shift
            else
                IGNORE_FILE=".gitignore"
            fi

            if ! [ -f "$IGNORE_FILE" ]; then
                echo "$SCRIPT_NAME: error: couldn't find file \"$IGNORE_FILE\"" >&2
                exit 1
            fi
            ;;
        -u | --update)
            UPDATE_CODING_STYLE="yes"
            shift
           ;;
        -*)
            echo "$SCRIPT_NAME: error: invalid option \"$1\"" >&2
            exit 2
            ;;
        *)
            POSITIONAL_ARGS=$((POSITIONAL_ARGS + 1))

            if [ "$POSITIONAL_ARGS" -gt 1 ]; then
                echo "$SCRIPT_NAME: error: too many args" >&2
                exit 2
            fi

            PROJECT_DIR="$1"
            shift
            ;;
    esac
done

if ! [ -d "$PROJECT_DIR" ]; then
    echo "$SCRIPT_NAME: error: \"$PROJECT_DIR\" is not a valid directory" >&2
    exit 1
fi


#########################################################
##                                                     ##
##                   Program Runtime                   ##
##                                                     ##
#########################################################

if [ "$UPDATE_CODING_STYLE" = "yes" ]; then
    update_coding_style_checker
fi

if [ "$CLEAN_RULE" ]; then
    make_clean_rule
fi

if [ "$IGNORE_FILE" ]; then
    ignore_files "$IGNORE_FILE"
fi

load_coding_style_checker "$PROJECT_DIR"

display_report "$PROJECT_DIR/$REPORT_FILE"

rm -f "$PROJECT_DIR/$REPORT_FILE"
