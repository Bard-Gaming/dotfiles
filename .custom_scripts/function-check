#!/bin/bash


SCRIPT_NAME=$(basename "$0")


#########################################################
##                                                     ##
##                        Utils                        ##
##                                                     ##
#########################################################

display_help() {
    cat <<-EOM

Usage:
 $SCRIPT_NAME [options] <binary> [binary, ...]

Get a list of all GNU C Library functions used in given binary files.

Options:
 -a, --almost-all      get all external functions.
 -A, --all             get all functions.
 -c, --columns         get the list in columns instead of rows.
 -d, --no-duplicates   if -H, only get unique function names, otherwise only unique binaries
 -F, --force-headers   force display of binary file names (for when there's only a single binary)
 -h, --help            display this message and exit.
 -H, --no-headers      don't display binary file names. (default if single binary is specified)

EOM
}

get_detailed_function_list() {
    nm "$1" | sed -E 's/ +/ /' | grep -v "__" | grep -v " _"
}

mark_owned() {
    # This function only exists due to syntax issues
    sed -E 's/( T )|( t )/ t $/'
}

get_function_list() {
    local FUNCTION_LIST

    case "$LIST" in
        glibc)
            nm -j "$1" | grep "@GLIBC" | grep -v "__" | cut -d"@" -f1
            return 0
            ;;
        almost-all)
            FUNCTION_LIST=$(get_detailed_function_list "$1" | grep -v " T " | grep -v " t " | cut -d" " -f3)
            color_functions $FUNCTION_LIST
            return 0
            ;;
        all)
            FUNCTION_LIST=$(get_detailed_function_list "$1" | mark_owned | cut -d" " -f3)
            color_functions $FUNCTION_LIST
            return 0
            ;;
    esac
    return 1
}

glibc_color() {
    echo $'\033[38;5;27;1m'"$1"$'\033[0m'
}

sfml_color() {
    echo $'\033[38;5;76;1m'"$1"$'\033[0m'
}

owned_color() {
    echo $'\033[38;5;220;1m'"$1"$'\033[0m'
}

color_functions() {
    for FUNCTION_NAME in "$@"; do
        printf "%s; " "$FUNCTION_NAME"

        if [[ $FUNCTION_NAME =~ @GLIBC ]]; then
            glibc_color "$(echo "$FUNCTION_NAME" | cut -d"@" -f1)"
            continue
        fi

        if [[ $FUNCTION_NAME =~ ^sf[A-Z] ]]; then
            sfml_color "$FUNCTION_NAME"
            continue
        fi

        if [[ $FUNCTION_NAME =~ ^\$ ]]; then
            owned_color "${FUNCTION_NAME:1}"
            continue
        fi

        echo "$FUNCTION_NAME"
    done
}


#########################################################
##                                                     ##
##                       Parsing                       ##
##                                                     ##
#########################################################

BINARIES=()
DISPLAY_COLUMNS=0
DISPLAY_HEADERS=1
FORCE_HEADERS=0
NO_DUPLICATES=0
LIST="glibc"

while [ "$#" -gt 0 ]; do
    case "$1" in
        -a | --almost-all)
            LIST="almost-all"
            shift
            ;;
        -A | --all)
            LIST="all"
            shift
            ;;
        -c | --columns)
            DISPLAY_COLUMNS=1
            shift
            ;;
        -d | --no-duplicates)
            NO_DUPLICATES=1
            shift
            ;;
        -F | --force-headers)
            FORCE_HEADERS=1
            shift
            ;;
        -h | --help)
            display_help
            exit 0
            ;;
        -H | --no-headers)
            DISPLAY_HEADERS=0
            shift
            ;;
        -*)
            echo "$SCRIPT_NAME: Error: Unknown option '$1'" 1>&2
            exit 1
            ;;
        *)
            BINARIES+=("$1")
            shift
            ;;
    esac
done

BINARY_COUNT="${#BINARIES[@]}"

if [ "$BINARY_COUNT" -eq 0 ]; then
    echo "$SCRIPT_NAME: Error: At least one binary file is required" 1>&2
    exit 1
elif [ "$BINARY_COUNT" -eq 1 ] && [ $DISPLAY_HEADERS -eq 1 ] && [ $FORCE_HEADERS -eq 0 ]; then
    DISPLAY_HEADERS=0  # don't display headers if only a single binary is present
fi


#########################################################
##                                                     ##
##                    Program Logic                    ##
##                                                     ##
#########################################################

FULL_OUTPUT=""
NEWLINE=$'\n'

if [ $NO_DUPLICATES -eq 1 ] && [ $DISPLAY_HEADERS -eq 1 ]; then
    BINARIES_STR="$(printf '%s\n' "${BINARIES[@]}" | sort -u)"
else
    BINARIES_STR="${BINARIES[*]}"
fi

for BINARY in $BINARIES_STR; do
    if ! [ -f "$BINARY" ] || ! [ -r "$BINARY" ]; then
        echo "$SCRIPT_NAME: Error: Couldn't read file '$BINARY'" 1>&2
        exit 1
    fi

    OUTPUT="$(get_function_list "$BINARY")"

    if [ $DISPLAY_COLUMNS -eq 1 ]; then
        OUTPUT=$(echo "$OUTPUT" | column)
    fi

    if [ $DISPLAY_HEADERS -eq 1 ]; then
        OUTPUT=$(echo "$OUTPUT" | sed -e "s/^/  /")
        OUTPUT="$BINARY:$NEWLINE$OUTPUT$NEWLINE"
    fi

    FULL_OUTPUT="$FULL_OUTPUT$OUTPUT$NEWLINE"
done

if [ $DISPLAY_HEADERS -eq 0 ] && [ $NO_DUPLICATES -eq 1 ]; then
    FULL_OUTPUT=$(printf "%s" "$FULL_OUTPUT" | sort -u -i)
    FULL_OUTPUT="$FULL_OUTPUT$NEWLINE"
fi

printf "%s" "$FULL_OUTPUT"

exit 0
