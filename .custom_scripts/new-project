#!/bin/bash

# Interrupt handling:
interrupt_handler() {
    trap SIGINT  # restore default SIGINT handling
    echo "" 1>&2
    echo "Cancelled new project creation" 1>&2
    exit
}

trap "interrupt_handler" SIGINT

str_is_option() {
    local first_char
    first_char=$(printf %.1s "$1")
    [ "$first_char" = "-" ]
    echo "$?"
}

# Get project name:
if [ "$#" -gt 0 ] && [ "$(str_is_option "${@: -1}")" -eq 1 ]; then
    PROJECT_NAME="${@: -1}"
else
    read -r -p "Project name: " PROJECT_NAME
fi

# Constants:
TEMPLATE_DIR="$HOME/.custom_scripts/templates"
INCLUDE_DIR="$(pwd)/$PROJECT_NAME/include"

# Check if project name is a valid name
# (only alphanumerics and '_' are allowed):
if [[ "$PROJECT_NAME" =~ [^a-zA-Z0-9\_] ]]; then
    echo "new-project: $PROJECT_NAME: invalid project name" 1>&2
    exit
fi

# Create project dir if it doesn't exist already
if [ ! -d $PROJECT_NAME ]; then
    mkdir "$PROJECT_NAME"
fi
cd "$PROJECT_NAME" || exit

# Check for already present files to prevent
# accidentally creating the same project twice:
if [ -f .gitignore ]; then
    echo "new-project: $PROJECT_NAME: project already exists" 1>&2
    exit
fi

# Create project files/dirs:
touch .gitignore
touch main.c
touch Makefile
touch .dir-locals.el
touch README.md
mkdir include

cat "$TEMPLATE_DIR/gitignore" | sed "s/\[PROJECT_NAME\]/$PROJECT_NAME/" >> .gitignore
cat "$TEMPLATE_DIR/main" | sed "s/\[PROJECT_NAME\]/$PROJECT_NAME/" >> main.c
cat "$TEMPLATE_DIR/makefile" | sed "s/\[PROJECT_NAME\]/$PROJECT_NAME/" >> Makefile
cat "$TEMPLATE_DIR/dir_locals" | sed "s;\[INCLUDE_DIR\];$INCLUDE_DIR;" >> .dir-locals.el
cat "$TEMPLATE_DIR/readme" | sed "s/\[PROJECT_NAME\]/$PROJECT_NAME/" >> README.md


# Project config:
intercept-build make -s
make -s fclean

# Success message
echo "Successfully made project \"$PROJECT_NAME\""

# Restore signal handling
trap SIGINT
